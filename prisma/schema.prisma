// This is your Prisma schema file
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Bill {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Bill details
  title       String // e.g., "Dinner at Sushi Restaurant"
  description String? // Optional description
  totalAmount Float // Total bill amount // float or int? cause not decimal in JPT
  currency    String   @default("JPY") // Default to Japanese Yen
  date        DateTime // When the bill was created

  // Restaurant/location info
  restaurantName String?
  location       String?

  // Bill status
  status BillStatus @default(OPEN)

  // Relations
  shares  Share[] // One-to-many relation with shares
  ownerId String // ID of the person who paid
  owner   User    @relation(fields: [ownerId], references: [id])

  // Sharing
  shareUrl String @unique // Unique URL for sharing

  @@index([ownerId])
  @@map("bills")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?       @map("email_verified")
  image         String? // Avatar URL
  // Relations
  bills         Bill[] // Bills created by this user
  shares        Share[] // Shares this user needs to pay
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Share {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  amount Float // Amount this person needs to pay
  status ShareStatus @default(PENDING)
  note   String?

  // Relations
  billId String
  bill   Bill   @relation(fields: [billId], references: [id])
  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@index([billId])
  @@index([userId])
  @@map("shares")
}

enum BillStatus {
  OPEN // Bill is open for shares to be added
  LOCKED // No more shares can be added
  COMPLETED // All shares have been paid
  CANCELLED // Bill was cancelled
}

enum ShareStatus {
  PENDING // Share has been claimed but not paid
  PAID // Share has been paid
  CANCELLED // Share was cancelled
}
